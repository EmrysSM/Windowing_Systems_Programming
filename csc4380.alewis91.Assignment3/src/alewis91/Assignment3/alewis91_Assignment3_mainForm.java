/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package alewis91.Assignment3;

import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author aaron
 */
public class alewis91_Assignment3_mainForm extends javax.swing.JFrame {

    
    int key = 0;
    /**
     * Creates new form alewis91_Assignment3_mainForm
     */
    public alewis91_Assignment3_mainForm() {
        initComponents();
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        int x = (int) ((screen.getWidth() - getWidth()) /2);
        int y = (int) ((screen.getHeight() -getHeight()) /2);
        setLocation(x, y);
        this.setTitle("Encrytion Software - alewis91-Assignment3");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtKeyInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEncrypted = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDecrypted = new javax.swing.JTextArea();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        lblKey = new javax.swing.JLabel();
        lblEnc = new javax.swing.JLabel();
        lblDec = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        MnuFile = new javax.swing.JMenu();
        MnuEdit = new javax.swing.JMenu();
        MnuExit = new javax.swing.JMenu();
        MnuClear = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        txtKeyInput.setText("0");
        txtKeyInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyInputActionPerformed(evt);
            }
        });
        txtKeyInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtKeyInputKeyReleased(evt);
            }
        });

        txtEncrypted.setColumns(20);
        txtEncrypted.setRows(5);
        txtEncrypted.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEncryptedKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEncryptedKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtEncrypted);

        txtDecrypted.setColumns(20);
        txtDecrypted.setRows(5);
        txtDecrypted.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDecryptedKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtDecrypted);

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        lblKey.setText("Key");

        lblEnc.setText("Encrypted Text");

        lblDec.setText("Decrypted Text");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        MnuFile.setText("File");
        menuBar.add(MnuFile);

        MnuEdit.setText("Edit");
        menuBar.add(MnuEdit);

        MnuExit.setText("Exit");
        MnuExit.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MnuExitMenuSelected(evt);
            }
        });
        MnuExit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MnuExitKeyReleased(evt);
            }
        });
        menuBar.add(MnuExit);

        MnuClear.setText("Clear");
        MnuClear.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                MnuClearMenuSelected(evt);
            }
        });
        MnuClear.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MnuClearKeyReleased(evt);
            }
        });
        menuBar.add(MnuClear);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(lblKey))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(lblDec)
                        .addGap(257, 257, 257)
                        .addComponent(lblEnc))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(btnEncrypt)
                        .addGap(285, 285, 285)
                        .addComponent(btnDecrypt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClear)
                            .addComponent(txtKeyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(112, 112, 112))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(lblKey, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtKeyInput, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDec)
                    .addComponent(lblEnc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEncrypt)
                            .addComponent(btnDecrypt))
                        .addGap(32, 32, 32)
                        .addComponent(btnClear)
                        .addGap(74, 74, 74))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeyInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyInputActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        // TODO add your handling code here:
        txtEncrypted.setText("");
        for(int i = 0; i < txtDecrypted.getText().length(); i++)
        {
            decrypt(txtDecrypted.getText().charAt(i));
        }
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void txtEncryptedKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEncryptedKeyTyped
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtEncryptedKeyTyped

    private void txtEncryptedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEncryptedKeyReleased
        // TODO add your handling code here:
        //if(txtEncrypted.getText().equals("")) return;
        if(evt.getKeyCode() == evt.VK_SHIFT) return;
        
        if(evt.getKeyCode() == evt.VK_BACK_SPACE)
        {
            if(txtEncrypted.getText().length()==0)
            {
                txtDecrypted.setText("");
                return;
            }
            txtDecrypted.setText(txtDecrypted.getText().substring(0, txtDecrypted.getText().length()-1));
            return;
        }
        if(txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == ' ' ||
                txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == '.' ||
                txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == '!' ||
                txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == '?' ||
                txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == ',' ||
                txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) == '\n')
        {
            txtDecrypted.setText(txtDecrypted.getText() + txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1));
            return;
        }
        if((txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) >= 'a' && txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) <= 'z') ||  
                (txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) >= 'A' && txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1) <= 'Z'))
        {
            encrypt(txtEncrypted.getText().charAt(txtEncrypted.getText().length()-1));
        }
        
    }//GEN-LAST:event_txtEncryptedKeyReleased

    private void txtKeyInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeyInputKeyReleased
        // TODO add your handling code here:
        if(txtKeyInput.getText().equals("")) return;
        key = Integer.parseInt(txtKeyInput.getText());
    }//GEN-LAST:event_txtKeyInputKeyReleased

    private void txtDecryptedKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDecryptedKeyReleased
        // TODO add your handling code here:
        //if(txtDecrypted.getText().equals("")) return;
        if(evt.getKeyCode() == evt.VK_SHIFT) return;
        if(evt.getKeyCode() == evt.VK_BACK_SPACE)
        {
            if(txtDecrypted.getText().length()==0)
            {
                txtEncrypted.setText("");
                return;
            }
            txtEncrypted.setText(txtEncrypted.getText().substring(0, txtEncrypted.getText().length()-1));
            return;
        }
        if(txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == ' ' ||
                txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == '.' ||
                txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == '!' ||
                txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == '?' ||
                txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == ',' ||
                txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) == '\n')
        {
            txtEncrypted.setText(txtEncrypted.getText() + txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1));
            return;
        }
        if((txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) >= 'a' && txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) <= 'z') || 
                (txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) >= 'A' && txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1) <= 'Z'))
        {
            decrypt(txtDecrypted.getText().charAt(txtDecrypted.getText().length()-1));
        }
    }//GEN-LAST:event_txtDecryptedKeyReleased

    private void MnuExitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MnuExitKeyReleased
        System.exit(0);
    }//GEN-LAST:event_MnuExitKeyReleased

    private void MnuClearKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MnuClearKeyReleased
        txtDecrypted.setText("");
        txtEncrypted.setText("");
        key = 0;
        txtKeyInput.setText("0");
    }//GEN-LAST:event_MnuClearKeyReleased

    private void MnuClearMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MnuClearMenuSelected
         txtDecrypted.setText("");
        txtEncrypted.setText("");
        key = 0;
        txtKeyInput.setText("0");
    }//GEN-LAST:event_MnuClearMenuSelected

    private void MnuExitMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_MnuExitMenuSelected
        System.exit(0);
    }//GEN-LAST:event_MnuExitMenuSelected

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        // TODO add your handling code here:
        txtDecrypted.setText("");
        for(int i = 0; i < txtEncrypted.getText().length(); i++)
        {
            encrypt(txtEncrypted.getText().charAt(i));
        }
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtDecrypted.setText("");
        txtEncrypted.setText("");
        key = 0;
        txtKeyInput.setText("0");
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(alewis91_Assignment3_mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(alewis91_Assignment3_mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(alewis91_Assignment3_mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(alewis91_Assignment3_mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new alewis91_Assignment3_mainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MnuClear;
    private javax.swing.JMenu MnuEdit;
    private javax.swing.JMenu MnuExit;
    private javax.swing.JMenu MnuFile;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDec;
    private javax.swing.JLabel lblEnc;
    private javax.swing.JLabel lblKey;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JTextArea txtDecrypted;
    private javax.swing.JTextArea txtEncrypted;
    private javax.swing.JTextField txtKeyInput;
    // End of variables declaration//GEN-END:variables

    private void encrypt(char c) {
          if( c >= 'a' && c <= 'z')
          {
               if(c+key > 'z')
               {
                   txtDecrypted.setText(txtDecrypted.getText() + (char)('a' + (c+key-'a')%26));
               }
               else
               {
                   txtDecrypted.setText(txtDecrypted.getText() + (char)(c+key));
               }
          }
          else if( c >= 'A' && c <= 'Z')
          {
               if(c+key > 'Z')
               {
                   txtDecrypted.setText(txtDecrypted.getText() + (char)('A' + (c+key-'A')%26));
               }
               else
               {
                   txtDecrypted.setText(txtDecrypted.getText() + (char)(c+key));
               }
          }
          else{
              txtDecrypted.setText(txtDecrypted.getText() + c);
          }
    }

    private void decrypt(char c) {
        if( c >= 'a' && c <= 'z')
          {
               if(c-key < 'a')
               {
                   txtEncrypted.setText(txtEncrypted.getText() + (char)('z' - (Math.abs(c-key-'a'+1))%26));
               }
               else
               {
                   txtEncrypted.setText(txtEncrypted.getText() + (char)(c-key));
               }
          }
        else if( c >= 'A' && c <= 'Z')
          {
               if(c-key < 'A')
               {
                   txtEncrypted.setText(txtEncrypted.getText() + (char)('Z' - (Math.abs(c-key-'A'+1))%26));
               }
               else
               {
                   txtEncrypted.setText(txtEncrypted.getText() + (char)(c-key));
               }
          }
          else{
              txtEncrypted.setText(txtEncrypted.getText() + c);
          }
    }
}
